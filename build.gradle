tasks.register('loadsonar') {
    description = 'load postgres container to kube'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sonar-namespace.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/pg-config.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/pg-volume.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/pg-service.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/pg-deploy.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sq-config.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sq-volume.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sq-service.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sq-deploy.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sq-ingress.yml'
        }
    }
}

tasks.register('deletesonar', GradleBuild) {
    description = 'delete postgres kube resources'
    group = "container"
    startParameter.projectProperties = ['namespace':'sonar']
    tasks = ['deleteAll']
}

tasks.register('loadjenkins') {
    description = 'load postgres container to kube'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/jenkins/jenkins-namespace.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/jenkins/jenkins-volume.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/jenkins/jenkins-deploy.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/jenkins/jenkins-service.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/jenkins/jenkins-ingress.yml'
        }
    }
}

tasks.register('deletejenkins', GradleBuild) {
    description = 'delete jenkins kube resources'
    group = "container"
    startParameter.projectProperties = ['namespace':'jenkins']
    tasks = ['deleteAll']
}

tasks.register('jenkinssecret') {
    description = 'get initial jenkins password'
    group = "container"
    doLast {
        if (project.hasProperty('jenkins_pod')) {
            exec {
                workingDir '.'
                commandLine 'bash', '-c',
                'kubectl -n=jenkins exec -it ' + "${jenkins_pod}" + ' -- cat /var/jenkins_home/secrets/initialAdminPassword'
            }
        } else {
            println "need to set -Pjenkins_pod=[pod name]"
        }
    }
}

tasks.register('loaddnsutils') {
    description = 'load dnsutils container to kube'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/dns/dnsutils.yml'
        }
    }
}

tasks.register('deletednsutils') {
    description = 'delete dnsutils container to kube'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'delete', 'pod', 'dnsutils'
        }
    }
}

// https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/
// https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md
tasks.register('loaddashboard') {
    description = 'load postgres container to kube'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'create', 'namespace', 'kubernetes-dashboard'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml',
                '-n', 'kubernetes-dashboard'

        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/dashboard/admin-user.yml'
        }
        // dump token       
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                'kubectl get secret admin-user -n kubernetes-dashboard -o jsonpath={".data.token"} | base64 -d'
        }
    }
}

tasks.register('dashboadtoken') {
    description = 'get login token'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                'kubectl get secret admin-user -n kubernetes-dashboard -o jsonpath={".data.token"} | base64 -d'
        }
    }
}

tasks.register('deletedashboard', GradleBuild) {
    description = 'delete jenkins kube resources'
    group = "container"
    startParameter.projectProperties = ['namespace':'kubernetes-dashboard']
    tasks = ['deleteAll']
    doLast {
        exec {
            workingDir '.'
            ignoreExitValue true
            commandLine 'kubectl', 'delete', 'serviceAccounts', 
            '-n', 'kubernetes-dashboard', 'admin-user'
        }
        exec {
            workingDir '.'
            ignoreExitValue true
            commandLine 'kubectl', 'delete', 'ClusterRoleBinding', 
            '-n', 'kubernetes-dashboard', 'admin-user'
        }
    }
}

tasks.register('deleteAll') {
    doLast {
        if (project.hasProperty('namespace')) {
            exec {
                workingDir '.'
                commandLine 'bash', '-c',
                    'kubectl ' + "-n=${namespace}" + ' delete all --all' 
            }
            exec {
                workingDir '.'
                commandLine 'bash', '-c',
                    'kubectl api-resources --verbs=list --namespaced -o name ' +
                    '| xargs -i kubectl ' + "-n=${namespace}" + ' delete {} --all'        
            }
            exec {
                workingDir '.'
                ignoreExitValue true
                commandLine 'bash', '-c',
                    'kubectl delete namespace ' + "${namespace}" 
            }
        } else {
            println "need to set -Pnamespace=[resource namespace]"
        }
    }
}

// https://docs.aws.amazon.com/cli/latest/reference/eks/update-kubeconfig.html
tasks.register('awsConfig') {
    description = 'create kube config file for aws cluster'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
            'aws eks update-kubeconfig --name cicd'
        }
    }
}

// https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html
tasks.register('awsCluster') {
    description = 'create aws cluster'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
            'aws eks create-cluster ' + 
            '--name cicd ' + 
            '--kubernetes-version 1.27 ' +
            '--role-arn arn:aws:iam::744686699669:role/EKSClusterRole ' +
            '--resources-vpc-config subnetIds=subnet-57a4b40e,subnet-756ec211,securityGroupIds=sg-9e97a0f9'
        }
    }
}