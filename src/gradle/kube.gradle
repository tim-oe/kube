tasks.register('loadsonar') {
    description = 'load postgres container to kube'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sonar-namespace.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/pg-config.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/pg-volume.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/pg-service.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/pg-deploy.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sq-config.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sq-volume.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sq-service.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sq-deploy.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sq-ingress.yml'
        }
    }
}

tasks.register('deletesonar', GradleBuild) {
    description = 'delete postgres kube resources'
    group = "container"
    startParameter.projectProperties = ['namespace':'sonar']
    tasks = ['deleteAll']
    doLast {
        exec {
            workingDir '.'
            ignoreExitValue true
            commandLine 'kubectl', 'delete', 'pv',  '-name', 'sonar-pv'
        }
        exec {
            workingDir '.'
            ignoreExitValue true
            commandLine 'kubectl', 'delete', 'pv',  '-name', 'posgres-pv'
        }
    }
}

tasks.register('loadjenkins') {
    description = 'load postgres container to kube'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/jenkins/jenkins-namespace.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/jenkins/jenkins-volume.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/jenkins/jenkins-deploy.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/jenkins/jenkins-service.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/jenkins/jenkins-ingress.yml'
        }
    }
}

tasks.register('deletejenkins', GradleBuild) {
    description = 'delete jenkins kube resources'
    group = "container"
    startParameter.projectProperties = ['namespace':'jenkins']
    tasks = ['deleteAll']
    doLast {
        exec {
            workingDir '.'
            ignoreExitValue true
            commandLine 'kubectl', 'delete', 'pv',  '-name', 'jenkins-pv'
        }
    }
}

tasks.register('jenkinssecret') {
    description = 'get initial jenkins password'
    group = "container"
    doLast {
        if (project.hasProperty('jenkins_pod')) {
            exec {
                workingDir '.'
                commandLine 'bash', '-c',
                'kubectl -n=jenkins exec -it ' + "${jenkins_pod}" + ' -- cat /var/jenkins_home/secrets/initialAdminPassword'
            }
        } else {
            println "need to set -Pjenkins_pod=[pod name]"
        }
    }
}

tasks.register('loaddnsutils') {
    description = 'load dnsutils container to kube'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/dns/dnsutils.yml'
        }
    }
}

tasks.register('deletednsutils') {
    description = 'delete dnsutils container to kube'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'delete', 'pod', 'dnsutils'
        }
    }
}

// https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/
// https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md
tasks.register('loaddashboard') {
    description = 'load postgres container to kube'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'create', 'namespace', 'kubernetes-dashboard'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 
                'https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml',
                '-n', 'kubernetes-dashboard'

        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/dashboard/admin-user.yml'
        }
        // dump token       
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                'kubectl get secret admin-user -n kubernetes-dashboard -o jsonpath={".data.token"} | base64 -d'
        }
    }
}

tasks.register('dashboadtoken') {
    description = 'get login token'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                'kubectl get secret admin-user -n kubernetes-dashboard -o jsonpath={".data.token"} | base64 -d'
        }
    }
}

tasks.register('deletedashboard', GradleBuild) {
    description = 'delete jenkins kube resources'
    group = "container"
    startParameter.projectProperties = ['namespace':'kubernetes-dashboard']
    tasks = ['deleteAll']
    doLast {
        exec {
            workingDir '.'
            ignoreExitValue true
            commandLine 'kubectl', 'delete', 'serviceAccounts', 
            '-n', 'kubernetes-dashboard', 'admin-user'
        }
        exec {
            workingDir '.'
            ignoreExitValue true
            commandLine 'kubectl', 'delete', 'ClusterRoleBinding', 
            '-n', 'kubernetes-dashboard', 'admin-user'
        }
    }
}

// https://argo-cd.readthedocs.io/en/stable/getting_started/
tasks.register('loaddargo') {
    description = 'load argcd container to kube'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'create', 'namespace', 'argocd'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-n', 'argocd', '-f', 
            'https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/install.yaml'
        }
    }
}

tasks.register('deleteargo', GradleBuild) {
    description = 'delete argocd container to kube'
    group = "container"
    startParameter.projectProperties = ['namespace':'argocd']
    tasks = ['deleteAll']
    // doLast {
    //     exec {
    //         workingDir '.'
    //         commandLine 'kubectl', 'delete', 'pod', 'dnsutils'
    //     }
    // }
}

// https://kubernetes.github.io/ingress-nginx/deploy/#bare-metal-clusters
tasks.register('loaddnginx') {
    description = 'load nginx container to kube'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 
            'https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.0/deploy/static/provider/baremetal/deploy.yaml'
        }
    }
}

tasks.register('deleteninx', GradleBuild) {
    description = 'delete nginx container to kube'
    group = "container"
    startParameter.projectProperties = ['namespace':'ingress-nginx']
    tasks = ['deleteAll']
}

// https://docs.k3s.io/upgrades/automated
// https://github.com/rancher/system-upgrade-controller?tab=readme-ov-file
// https://www.cncf.io/blog/2020/11/25/upgrade-a-k3s-kubernetes-cluster-with-system-upgrade-controller/
tasks.register('loadUpgradeCtlr') {
    description = 'load upgrade controller to kube'
    group = "container"
    doLast {
        copy {
            from layout.projectDirectory.dir('src/kube/upgradeController/upgrade-plan.yml')
            into layout.buildDirectory
            include 'upgrade-plan.yml'
            expand(
                    k3s_version: "${K3S_VERSION}"            
            )
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'create', 'namespace', 'system-upgrade'
        }
        // https://github.com/rancher/system-upgrade-controller/issues/298
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 
            "https://github.com/rancher/system-upgrade-controller/releases/download/${SYSTEM_UPGRADE_CONTROLLER_VERSION}/crd.yaml"
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 
            "https://github.com/rancher/system-upgrade-controller/releases/download/${SYSTEM_UPGRADE_CONTROLLER_VERSION}/system-upgrade-controller.yaml"
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 
            "build/upgrade-plan.yml"
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'label', 'node', 'tec-kube-n1', 'k3s-upgrade=true' 
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'label', 'node', 'tec-kube-n2', 'k3s-upgrade=true' 
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'label', 'node', 'tec-kube-n3', 'k3s-upgrade=true' 
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'label', 'node', 'tec-kube-ctlr', 'k3s-upgrade=true' 
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'label', 'node', 'tec-kube-ctlr', 'node-role.kubernetes.io/master=true' 
        }
     }
}

tasks.register('deleteUpgradeCtlr', GradleBuild) {
    description = 'delete nginx container to kube'
    group = "container"
    startParameter.projectProperties = ['namespace':'system-upgrade']
    tasks = ['deleteAll']
}

// https://blog.devgenius.io/kubernetes-resource-discovery-how-to-list-all-resources-in-a-namespace-555d4e662cfd
tasks.register('deleteAll') {
    doLast {
        if (project.hasProperty('namespace')) {
            exec {
                workingDir '.'
                commandLine 'bash', '-c',
                    'kubectl ' + "-n=${namespace}" + ' delete all --all' 
            }
            exec {
                workingDir '.'
                commandLine 'bash', '-c',
                    'kubectl api-resources --verbs=list --namespaced -o name ' +
                    '| xargs -i kubectl ' + "-n=${namespace}" + ' delete {} --all'        
            }
            exec {
                workingDir '.'
                ignoreExitValue true
                commandLine 'bash', '-c',
                    'kubectl delete events -n kube-system' 
            }
            exec {
                workingDir '.'
                ignoreExitValue true
                commandLine 'bash', '-c',
                    'kubectl delete namespace ' + "${namespace}" 
            }
        } else {
            println "need to set -Pnamespace=[resource namespace]"
        }
    }
}
