// https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/
// TODO https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-using-native-package-management
tasks.register('updateKubectl') {
    description = 'update kubectl'
    group = "utils"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"'
        }
        exec {
            workingDir '.'
            commandLine 'chmod', '777', 'kubectl'
        }
        exec {
            workingDir '.'
            commandLine 'sudo', 'mv', 'kubectl', '/usr/local/bin/'
        }
        exec {
            workingDir '.'
            commandLine 'rm', '-f', 'kubectl'
        }
    }
}

// https://blog.devgenius.io/kubernetes-resource-discovery-how-to-list-all-resources-in-a-namespace-555d4e662cfd
tasks.register('deleteAll') {
    doLast {
        if (project.hasProperty('namespace')) {
            exec {
                workingDir '.'
                commandLine 'bash', '-c',
                        'kubectl ' + "-n=${namespace}" + ' delete all --all'
            }
            exec {
                workingDir '.'
                commandLine 'bash', '-c',
                        'kubectl api-resources --verbs=list --namespaced -o name ' +
                        '| xargs -t -i kubectl ' + "-n=${namespace}" + ' delete {} --all'
            }
            exec {
                workingDir '.'
                ignoreExitValue true
                commandLine 'bash', '-c',
                        'kubectl delete events -n kube-system'
            }
            exec {
                workingDir '.'
                ignoreExitValue true
                commandLine 'bash', '-c',
                        'kubectl delete namespace ' + "${namespace}"
            }
        } else {
            println "need to set -Pnamespace=[resource namespace]"
        }
    }
}

// https://hub.docker.com/_/sonarqube/
// https://serverfault.com/questions/956361/kubernetes-docker-and-vm-max-map-count
// https://hub.docker.com/_/postgres/
// https://severalnines.com/blog/using-kubernetes-deploy-postgresql
// https://docs.vmware.com/en/VMware-SQL-with-Postgres-for-Kubernetes/1.9/tanzu-postgres-k8s/GUID-accessing.html
// tasks.register('loadSonar') {
//     description = 'load postgres container to kube'
//     group = "container"
//     doLast {
//         exec {
//             workingDir '.'
//             commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sonarqube-namespace.yml'
//         }
//         exec {
//             workingDir '.'
//             commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/postgresql-volume.yml'
//         }
//         exec {
//             workingDir '.'
//             commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/postgresql-data-volume.yml'
//         }
//         exec {
//             workingDir '.'
//             commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/postgresql-service.yml'
//         }
//         exec {
//             workingDir '.'
//             commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/postgresql-deploy.yml'
//         }
//         exec {
//             workingDir '.'
//             commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sonarqube-data-volume.yml'
//         }
//         exec {
//             workingDir '.'
//             commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sonarqube-extensions-volume.yml'
//         }
//         exec {
//             workingDir '.'
//             commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sonarqube-service.yml'
//         }
//         exec {
//             workingDir '.'
//             commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sonarqube-deploy.yml'
//         }
//         exec {
//             workingDir '.'
//             commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sonarqube-ingress.yml'
//         }
//     }
// }
tasks.register('loadSonar') {
    description = 'load postgres container to kube'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sonar-namespace.yaml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/postgres-pvc.yaml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/postgres-app.yaml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sonar-pvc.yaml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sonar-app.yaml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/sonar/sonar-ingress.yaml'
        }
    }
}


tasks.register('rmSonar', GradleBuild) {
    description = 'delete postgres kube resources'
    group = "container"
    startParameter.projectProperties = ['namespace':'sonarqube']
    tasks = ['deleteAll']
    doLast {
        exec {
            workingDir '.'
            ignoreExitValue true
            commandLine 'kubectl', 'delete', 'pvc',  '-name', 'sonar-pvc', '-n', 'default'
        }
        exec {
            workingDir '.'
            ignoreExitValue true
            commandLine 'kubectl', 'delete', 'pvc',  '-name', 'postgres-pvc', '-n', 'default'
        }
    }
}

// https://www.jenkins.io/doc/book/installing/kubernetes/
tasks.register('loadJenkins') {
    description = 'load jenkins container to kube'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/jenkins/jenkins-namespace.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/jenkins/jenkins-volume.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/jenkins/jenkins-deploy.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/jenkins/jenkins-service.yml'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/jenkins/jenkins-ingress.yml'
        }
    }
}

tasks.register('rmJenkins', GradleBuild) {
    description = 'delete jenkins kube resources'
    group = "container"
    startParameter.projectProperties = ['namespace':'jenkins']
    tasks = ['deleteAll']
}


tasks.register('jenkinsSecret') {
    description = 'get initial jenkins password'
    group = "container"
    doLast {
        def stdout = new ByteArrayOutputStream()
        exec {
            workingDir '.'
            standardOutput = stdout;
            commandLine 'bash', '-c',
                    'kubectl get pod -n=jenkins | grep jenkins-'
        }

        project.ext.jenkins_pod = stdout.toString().trim().replaceFirst("(jenkins-\\w+-\\w+).*", "\$1")
        println "jenkins pod : [" +  project.jenkins_pod + "]"

        if (project.hasProperty('jenkins_pod')) {
            exec {
                workingDir '.'
                commandLine 'bash', '-c',
                        'kubectl -n=jenkins exec -it ' + "${jenkins_pod}" + ' -- cat /var/jenkins_home/secrets/initialAdminPassword'
            }
        } else {
            println "need to set -Pjenkins_pod=[pod name]"
        }
    }
}

// dns utilities to see host information
// https://dev.to/vepo/finding-dns-for-kubernetes-service-3p0e
tasks.register('loadDnsutils') {
    description = 'load dnsutils container to kube'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/dns/dnsutils.yml'
        }
    }
}

tasks.register('rmDnsutils') {
    description = 'delete dnsutils container to kube'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'delete', 'pod', 'dnsutils'
        }
    }
}
// https://github.com/kubernetes/dashboard/blob/master/docs/user/accessing-dashboard/README.md
// https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/README.md
// https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/
tasks.register('loadDashboard') {
    description = 'load postgres container to kube'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/'
        }
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'helm upgrade --install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard --create-namespace --namespace kubernetes-dashboard'
        }
        // working via claude.ai...
        // using envar to externalize cert/key
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                'envsubst < src/kube/dashboard/ingress.yml | kubectl apply -f -'
        }
        // https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/dashboard/dashboard-admin.yml'
        }
        // dump token
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'kubectl get secret dashboard-admin -n kubernetes-dashboard -o jsonpath={".data.token"} | base64 -d'
        }
    }
}

tasks.register('dashboadtoken') {
    description = 'get login token'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'bash', '-c',
                    'kubectl get secret dashboard-admin -n kubernetes-dashboard -o jsonpath={".data.token"} | base64 -d'
        }
    }
}

tasks.register('rmDashboard', GradleBuild) {
    description = 'delete kube dashboard kube resources'
    group = "container"
    startParameter.projectProperties = ['namespace':'kubernetes-dashboard']
    tasks = ['deleteAll']
    //crb is created globally
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'delete', 'clusterrolebinding', 'dashboard-admin' ,'--ignore-not-found=true'
        }
    }
}

// https://argo-cd.readthedocs.io/en/stable/getting_started/
// https://blog.differentpla.net/blog/2022/02/02/argocd/
// TODO need to make some sample app with nexus repo
tasks.register('loadArgo') {
    description = 'load argcd container to kube'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'create', 'namespace', 'argocd'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-n', 'argocd', '-f',
                    'https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/install.yaml'
        }
        // https://blog.differentpla.net/blog/2022/02/02/argocd/#argocd-cmd-params-cmyaml
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/argocd/argocd-cmd-params-cm.yml'
        }
        // expose service via nginx ingress
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/argocd/argocd-ingress.yml'
        }
        // https://blog.differentpla.net/blog/2022/02/02/argocd/#restart-the-argocd-server-pod
        exec {
            workingDir '.'
            commandLine 'kubectl', '--namespace','argocd', 'rollout','restart','deployment','argocd-server'
        }
    }
}

// https://blog.differentpla.net/blog/2022/02/02/argocd/#log-in
tasks.register('argoSecret') {
    description = 'get initial argo password'
    group = "container"
    doLast {
        def stdout = new ByteArrayOutputStream()
        exec {
            workingDir '.'
            standardOutput = stdout;
            commandLine 'bash', '-c',
                    "kubectl --namespace argocd get secret argocd-initial-admin-secret -o json | jq -r '.data.password' | base64 -d"
        }

        println "argo admin secret : [" +  stdout.toString().trim() + "]"
    }
}

tasks.register('rmArgo', GradleBuild) {
    description = 'delete argocd container to kube'
    group = "container"
    startParameter.projectProperties = ['namespace':'argocd']
    tasks = ['deleteAll']
}

// https://kubernetes.github.io/ingress-nginx/
// https://github.com/kubernetes/ingress-nginx
// https://blog.thenets.org/how-to-create-a-k3s-cluster-with-nginx-ingress-controller/
// TODO convert to helm?
// https://kubernetes.github.io/ingress-nginx/deploy/
tasks.register('loadEnginx') {
    description = 'load nginx ingress controller to kube'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f',
                    "https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-${INGRESS_NGINX_VERSION}/deploy/static/provider/cloud/deploy.yaml"
        }
        // need to add actual load balancer...
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f',
                    'src/kube/nginx/nginx-loadbalancer.yml'
        }
    }
}

tasks.register('rmEnginx', GradleBuild) {
    description = 'remove nginx ingress controller from kube'
    group = "container"
    startParameter.projectProperties = ['namespace':'ingress-nginx']
    tasks = ['deleteAll']
}

// https://docs.k3s.io/upgrades/automated
// https://github.com/rancher/system-upgrade-controller?tab=readme-ov-file
// https://www.cncf.io/blog/2020/11/25/upgrade-a-k3s-kubernetes-cluster-with-system-upgrade-controller/
// These plans are adapted from work by Dax McDonald (https://github.com/daxmc99) and Hussein Galal (https://github.com/galal-hussein)
// in support of Rancher v2 managed k3s upgrades. See Also: https://rancher.com/docs/k3s/latest/en/upgrades/automated/
// gleened from https://github.com/rancher/system-upgrade-controller/blob/master/examples/k3s-upgrade.yaml
tasks.register('loadUpgradeCtlr') {
    description = 'load upgrade controller to kube'
    group = "container"
    doLast {
        copy {
            from layout.projectDirectory.dir('src/kube/upgradeController/upgrade-plan.yml')
            into layout.buildDirectory
            include 'upgrade-plan.yml'
            expand(
                    k3s_version: "${K3S_VERSION}"
                    )
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'create', 'namespace', 'system-upgrade'
        }
        // https://github.com/rancher/system-upgrade-controller/issues/298
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f',
                    "https://github.com/rancher/system-upgrade-controller/releases/download/${SYSTEM_UPGRADE_CONTROLLER_VERSION}/crd.yaml"
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f',
                    "https://github.com/rancher/system-upgrade-controller/releases/download/${SYSTEM_UPGRADE_CONTROLLER_VERSION}/system-upgrade-controller.yaml"
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f',
                    "build/upgrade-plan.yml"
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'label', '--overwrite', 'node', 'tec-kube-n1', 'k3s-upgrade=true'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'label', '--overwrite', 'node', 'tec-kube-n2', 'k3s-upgrade=true'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'label', '--overwrite', 'node', 'tec-kube-n3', 'k3s-upgrade=true'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'label', '--overwrite', 'node', 'tec-kube-ctlr', 'k3s-upgrade=true'
        }
    }
}

tasks.register('rmUpgradeCtlr', GradleBuild) {
    description = 'delete upgrade controller from kube'
    group = "container"
    startParameter.projectProperties = ['namespace':'system-upgrade']
    tasks = ['deleteAll']
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'label', '--overwrite', 'node', 'tec-kube-n1', 'k3s-upgrade-'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'label', '--overwrite', 'node', 'tec-kube-n2', 'k3s-upgrade-'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'label', '--overwrite', 'node', 'tec-kube-n3', 'k3s-upgrade-'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'label', '--overwrite', 'node', 'tec-kube-ctlr', 'k3s-upgrade-'
        }
    }
}

// https://longhorn.io/docs/1.7.2/
// https://longhorn.io/docs/1.7.2/deploy/install/install-with-kubectl/
// https://longhorn.io/docs/1.7.2/deploy/upgrade/longhorn-manager/
tasks.register('loadLonghorn') {
    description = 'load longhorn storage to kube'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f',
                    "https://raw.githubusercontent.com/longhorn/longhorn/${LONGHORN_VERSION}/deploy/longhorn.yaml"
        }
        exec {
            workingDir '.'
            commandLine 'kubectl', 'apply', '-f', 'src/kube/longhorn/ingress.yml'
        }
    }
}

tasks.register('cycleLonghorn') {
    description = 'recycle deployment and daemonset for longhorn storage'
    group = "container"
    doLast {
        exec {
            workingDir '.'
            commandLine 'kubectl','rollout','restart','deployment','longhorn-driver-deployer','-n','longhorn-system'
        }
        exec {
            workingDir '.'
            commandLine 'kubectl','rollout','restart','daemonset','longhorn-manager','-n','longhorn-system'        }
    }
}

tasks.register('rmLonghorn', GradleBuild) {
    description = 'remove longhorn storage from kube'
    group = "container"
    startParameter.projectProperties = ['namespace':'longhorn-system']
    tasks = ['deleteAll']
}
