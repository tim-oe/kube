// https://developer.hashicorp.com/terraform/cli
tasks.register('tfInit') {
    group = "terraform"
    doLast {
    }
    if (project.hasProperty('tf_svc_dir')) {
        exec {
            workingDir "${tf_svc_dir}"
            commandLine 'bash', '-c', 'terraform init'
        }
    } else {
        println "need to set -Ptf_svc_dir=[path to directory holding terraform manifest]"
    }
}

tasks.register('tfPlan') {
    group = "terraform"
    doLast {
    }
    if (project.hasProperty('tf_svc_dir')) {
        exec {
            workingDir "${tf_svc_dir}"
            commandLine 'bash', '-c', 'terraform plan -out tfplan'
        }
    } else {
        println "need to set -Ptf_svc_dir=[path to directory holding terraform manifest]"
    }
}

tasks.register('tfApply') {
    group = "terraform"
    doLast {
    }
    if (project.hasProperty('tf_svc_dir')) {
        exec {
            workingDir "${tf_svc_dir}"
            commandLine 'bash', '-c', 'terraform apply tfplan'
        }
    } else {
        println "need to set -Ptf_svc_dir=[path to directory holding terraform manifest]"
    }
}

tasks.register('tfDestroy') {
    group = "terraform"
    doLast {
    }
    if (project.hasProperty('tf_svc_dir')) {
        exec {
            workingDir "${tf_svc_dir}"
            commandLine 'bash', '-c', 'terraform apply -auto-approve -destroy'
        }
    } else {
        println "need to set -Ptf_svc_dir=[path to directory holding terraform manifest]"
    }
}

tasks.register('initDashboard', GradleBuild) {
    description = 'init dashboard tf service'
    group = "terraform"
    startParameter.projectProperties = ['tf_svc_dir':'src/terraform/dashboard']
    tasks = ['tfInit']
}

tasks.register('planDashboard', GradleBuild) {
    description = 'plan dashboard tf service'
    group = "terraform"
    startParameter.projectProperties = ['tf_svc_dir':'src/terraform/dashboard']
    tasks = ['tfPlan']
}

tasks.register('applyDashboard', GradleBuild) {
    description = 'apply dashboard tf service'
    group = "terraform"
    startParameter.projectProperties = ['tf_svc_dir':'src/terraform/dashboard']
    tasks = ['tfApply']
}

tasks.register('destroyDashboard', GradleBuild) {
    description = 'apply dashboard tf service'
    group = "terraform"
    startParameter.projectProperties = ['tf_svc_dir':'src/terraform/dashboard']
    tasks = ['tfDestroy']
}

tasks.register('initJenkins', GradleBuild) {
    description = 'init jenkins tf service'
    group = "terraform"
    startParameter.projectProperties = ['tf_svc_dir':'src/terraform/jenkins']
    tasks = ['tfInit']
}

tasks.register('planJenkins', GradleBuild) {
    description = 'plan jenkins tf service'
    group = "terraform"
    startParameter.projectProperties = ['tf_svc_dir':'src/terraform/jenkins']
    tasks = ['tfPlan']
}

tasks.register('applyJenkins', GradleBuild) {
    description = 'apply jenkins tf service'
    group = "terraform"
    startParameter.projectProperties = ['tf_svc_dir':'src/terraform/jenkins']
    tasks = ['tfApply']
}

tasks.register('initSonar', GradleBuild) {
    description = 'init sonar tf service'
    group = "terraform"
    startParameter.projectProperties = ['tf_svc_dir':'src/terraform/sonar']
    tasks = ['tfInit']
}

tasks.register('planSonar', GradleBuild) {
    description = 'plan sonar tf service'
    group = "terraform"
    startParameter.projectProperties = ['tf_svc_dir':'src/terraform/sonar']
    tasks = ['tfPlan']
}

tasks.register('applySonar', GradleBuild) {
    description = 'apply sonar tf service'
    group = "terraform"
    startParameter.projectProperties = ['tf_svc_dir':'src/terraform/sonar']
    tasks = ['tfApply']
}

tasks.register('destroySonar', GradleBuild) {
    description = 'apply sonar tf service'
    group = "terraform"
    startParameter.projectProperties = ['tf_svc_dir':'src/terraform/sonar']
    tasks = ['tfDestroy']
}
