# https://anthonynsimon.com/blog/kubernetes-cluster-raspberry-pi/#what-is-k3s-and-how-is-it-different-than-kubernetes
# http://armand.nz/notes/k3s/Kubernetes%20Cluster%20on%20Raspberry%20Pi%20using%20Ubuntu%2022.04%20LTS%20and%20K3s---
# https://longhorn.io/kb/troubleshooting-volume-with-multipath/
# https://longhorn.io/docs/1.7.2/nodes-and-volumes/nodes/node-conditions/
- name: "Install k3s dependencies"
  hosts: "kube_all"
  become: true
  become_user: "root"
  vars:
    cmd_file: "/boot/firmware/cmdline.txt"
    mod_file: "/etc/modules-load.d/longhorn.conf"
    multiline: |
          dm_crypt
          iscsi_tcp
  tasks:
    - name: "Install k3s dependencies"
      ansible.builtin.apt:
        pkg:
          - "python3-gpiozero"
          - "docker.io"
          - "linux-modules-extra-raspi"
          - "open-iscsi"
          - "nfs-common"
          - "util-linux"
          - "cryptsetup"
          - "dmsetup"
        state: "present"
    - name: "remove k3s conflicts"
      ansible.builtin.apt:
        pkg:
          - "multipath-tools"
        state: "absent"
    - name: "Remove unused packages from the cache"
      apt:
        autoclean: true
    - name: "Remove dependencies that are no longer required"
      apt:
        autoremove: true
    - name: Enable iscsid
      ansible.builtin.systemd_service:
        name: iscsid
        enabled: true
        masked: no
        state: "started"
    - name: "Check if docker cmd settings present."
      lineinfile:
        state: "absent"
        path: "{{ cmd_file }}"
        regexp: ".*cgroup_enable=cpuset.*"
      check_mode: true
      changed_when: false
      register: "cmd_docker"
    - name: "Append docker settings to cmdline config."
      lineinfile:
        path: "{{ cmd_file }}"
        backrefs: true
        regexp: "^(console=serial0.*)$"
        line: "\\1 cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1 swapaccount=1"
      when: "cmd_docker.found == 0"
    - name: "longhorn crypt mod dep"
      copy:
        dest: "{{ mod_file }}"
        content: "{{ multiline }}"
      register: load_mod
    - name: "Reboot to pickup cmdline changes."
      reboot:
        msg: "Reboot initiated by Ansible for device changes"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 10
        test_command: "uptime"
      when: "cmd_docker.found == 0 or load_mod.changed"
